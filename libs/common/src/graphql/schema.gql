# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Chat {
  conversations: [Message!]!
  createdAt: DateTime!
  id: ID!
  lastMessage: Message
  lastMessageId: String
  receiver: User
  receiverId: String
  sender: User
  senderId: String
  updatedAt: DateTime!
}

type ChatsResponse {
  entries: [Chat!]!
  total: Int!
}

type Connection {
  createdAt: DateTime!
  follower: User
  followerId: String!
  following: User
  followingId: String!
  id: ID!
  status: String!
  updatedAt: DateTime!
}

type ConnectionsResponse {
  entries: [Connection!]!
  total: Int!
}

type ConversationsResponse {
  entries: [Message!]!
  total: Int!
}

input CreateChatInput {
  attachment: Upload
  message: String

  """Receiver ID (Optional)"""
  receiverId: ID
}

input CreateGigInput {
  budget: Float!

  """Mandatory Field"""
  deadline: DateTime!

  """Mandatory Field"""
  description: String!
  image: String
  jobType: String
  location: String
  paymentMethod: String
  requirements: String

  """Mandatory Field"""
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Gig {
  budget: Float
  contractor: User!
  contractorId: String!
  createdAt: DateTime!
  deadline: DateTime
  description: String!
  id: ID!
  image: String
  jobType: String
  location: String
  paymentMethod: String
  proposals: [Proposal!]!
  requirements: String
  status: String!
  title: String!
  updatedAt: DateTime!
}

type GigsResponse {
  entries: [Gig!]!
  total: Int!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Message {
  chat: Chat
  chatId: String!
  createdAt: DateTime!
  id: ID!
  message: String
  seen: Boolean!
  sender: User
  senderId: String!
  updatedAt: DateTime!
}

type Mutation {
  acceptConnectionRequest(id: ID!): Connection!
  acceptProposal(id: ID!): Proposal!
  createGig(createGigInput: CreateGigInput!): Gig!
  deleteConnectionRequest(id: ID!): String!
  login(email: String!, password: String!): LoginResponse!
  register(payload: RegistrationInput!): RegistrationResponse!
  rejectProposal(id: ID!): Proposal!
  removeGig(id: String!): Gig!
  sendConnectionRequest(followingId: ID!): Connection!
  sendMessage(payload: CreateChatInput!): Chat!
  sendProposal(payload: SendProposalInput!): Proposal!
  updateGig(updateGigInput: UpdateGigInput!): Gig!
}

type Proposal {
  coverLetter: String!
  createdAt: DateTime!
  gig: Gig
  gigId: String!
  helper: User
  helperId: String!
  id: ID!
  status: String!
  updatedAt: DateTime!
}

type Query {
  chats(limit: Int, page: Int, searchText: String): ChatsResponse!
  connections(limit: Int, page: Int, searchText: String): ConnectionsResponse!
  conversations(chatId: ID!, limit: Int, page: Int, searchText: String): ConversationsResponse!
  gig(id: ID!): Gig
  gigs(limit: Int, page: Int, searchText: String): GigsResponse!
  proposals(gigId: ID!): [Proposal!]!
  user(id: ID!): User!
  users(limit: Int, page: Int, role: UserRole, searchText: String): UsersResponse!
}

input RegistrationInput {
  bio: String
  category: String
  company: String
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  phone: String
  role: UserRole!
}

type RegistrationResponse {
  message: String!
  user: User!
}

input SendProposalInput {
  """Mandatory Field"""
  coverLetter: String!

  """Mandatory Field"""
  gigId: String!
}

type Subscription {
  messageAdded(chatId: ID!): Message!
}

input UpdateGigInput {
  budget: Float

  """Mandatory Field"""
  deadline: DateTime

  """Mandatory Field"""
  description: String
  id: Int!
  image: String
  jobType: String
  location: String
  paymentMethod: String
  requirements: String

  """Mandatory Field"""
  title: String
}

"""File upload scalar type"""
scalar Upload

type User {
  bio: String
  category: String
  company: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: ID!
  isEmailVerified: Boolean!
  lastname: String!
  location: String
  phone: String
  profilePicture: String
  role: UserRole!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  CONTRACTOR
  HELPER
}

type UsersResponse {
  entries: [User!]!
  total: Int!
}