# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Chat {
  conversation: [Message!]!
  created_at: DateTime!
  id: ID!
  lastMessage: Message!
  updated_at: DateTime!
  users: [ChatUser!]!
}

type ChatUser {
  chat: Chat!
  chatId: String!
  created_at: DateTime!
  id: ID!
  role: String!
  updated_at: DateTime!
  user: User!
  userId: String!
}

type Connection {
  created_at: DateTime!
  follower: User
  followerId: String!
  following: User
  followingId: String!
  id: ID!
  status: String!
  updated_at: DateTime!
}

type ConnectionsResponse {
  entries: [Connection!]!
  total: Int!
}

input CreateGigInput {
  budget: Float!

  """Mandatory Field"""
  deadline: DateTime!

  """Mandatory Field"""
  description: String!
  image: String
  jobType: String
  location: String
  paymentMethod: String
  requirements: String

  """Mandatory Field"""
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Gig {
  budget: Float
  contractorId: String!
  created_at: DateTime!
  deadline: DateTime
  description: String!
  id: ID!
  image: String
  jobType: String
  location: String
  paymentMethod: String
  requirements: String
  status: String!
  title: String!
  updated_at: DateTime!
}

type GigsResponse {
  entries: [Gig!]!
  total: Int!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Message {
  chat: Chat!
  chatId: String!
  created_at: DateTime!
  id: ID!
  message: String!
  seen: Boolean!
  sender: User!
  senderId: String!
  updated_at: DateTime!
}

type Mutation {
  acceptConnectionRequest(id: ID!): Connection!
  createGig(createGigInput: CreateGigInput!): Gig!
  deleteConnectionRequest(id: ID!): String!
  login(email: String!, password: String!): LoginResponse!
  register(payload: RegistrationInput!): RegistrationResponse!
  removeGig(id: String!): Gig!
  sendConnectionRequest(followingId: ID!): Connection!
  updateGig(updateGigInput: UpdateGigInput!): Gig!
}

type Query {
  connections(limit: Int, page: Int, searchText: String): ConnectionsResponse!
  gig(id: ID!): Gig
  gigs(limit: Int, page: Int, searchText: String): GigsResponse!
}

input RegistrationInput {
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  role: UserRole!
}

type RegistrationResponse {
  message: String!
  user: User!
}

input UpdateGigInput {
  budget: Float

  """Mandatory Field"""
  deadline: DateTime

  """Mandatory Field"""
  description: String
  id: Int!
  image: String
  jobType: String
  location: String
  paymentMethod: String
  requirements: String

  """Mandatory Field"""
  title: String
}

type User {
  bio: String
  created_at: DateTime!
  email: String!
  firstname: String
  id: ID!
  isEmailVerified: Boolean!
  lastname: String!
  location: String
  profilePicture: String
  role: UserRole!
  updated_at: DateTime!
}

enum UserRole {
  ADMIN
  CONTRACTOR
  HELPER
}